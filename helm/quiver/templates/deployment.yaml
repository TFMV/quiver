apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "quiver.fullname" . }}
  labels:
    {{- include "quiver.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "quiver.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.port }}"
        prometheus.io/path: "/metrics"
      {{- end }}
      labels:
        {{- include "quiver.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: QUIVER_PORT
              value: "{{ .Values.service.port }}"
            - name: QUIVER_DIMENSION
              value: "{{ .Values.config.dimension }}"
            - name: QUIVER_MAX_ELEMENTS
              value: "{{ .Values.config.maxElements }}"
            - name: QUIVER_HNSW_M
              value: "{{ .Values.config.hnsw.m }}"
            - name: QUIVER_HNSW_EF_CONSTRUCT
              value: "{{ .Values.config.hnsw.efConstruction }}"
            - name: QUIVER_HNSW_EF_SEARCH
              value: "{{ .Values.config.hnsw.efSearch }}"
            - name: QUIVER_BATCH_SIZE
              value: "{{ .Values.config.batchSize }}"
            - name: QUIVER_PERSIST_INTERVAL
              value: "{{ .Values.config.persistence.interval }}"
            - name: QUIVER_BACKUP_INTERVAL
              value: "{{ .Values.config.backup.interval }}"
            - name: QUIVER_MAX_BACKUPS
              value: "{{ .Values.config.backup.maxBackups }}"
            - name: QUIVER_BACKUP_COMPRESSION
              value: "{{ .Values.config.backup.compression }}"
            - name: QUIVER_LOG_LEVEL
              value: "{{ .Values.config.logging.level }}"
          volumeMounts:
            - name: quiver-data
              mountPath: /data
            - name: config-volume
              mountPath: /app/config
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: quiver-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "quiver.fullname" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: config-volume
          configMap:
            name: {{ include "quiver.fullname" . }}-config
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }} 